# test main for the optimization algorithm vs ILP formulation

from ILP_knapsack import *
from optimization import dynamic_opt
import numpy as np
from data import *
import time
import matplotlib.pyplot as plt

t_filo = []
t_cap = []
sigma_filo = []
sigma_cap = []
n_exp = 30
comparison = False
ic = True
x = np.arange(10,150,20)

# NB: the LP formulation is rather slow, so it's better not to use more than 150 campaigns

for n_arms_adv in x:
    if isinstance(n_arms_adv, list):
        for i in range(len(n_arms_adv)):
            budgets.append(np.linspace(min_budget, max_budget, n_arms_adv[i]))
    else:
        budgets = [np.linspace(min_budget, max_budget, n_arms_adv)]
    list_budgets = budgets[0]
    n_arms = len(list_budgets)
    budget = 1
    budget_index = np.max(np.argwhere(list_budgets <= budget))
    real_rewards = [[] for _ in range(3)]
    for subcampaign in [1, 2, 3]:
        real_rewards[subcampaign-1] = n_for_b[subcampaign](list_budgets)

    t1 = []
    t2 = []
    for i in range(n_exp):
        start_time_experiment = time.time()
        dynamic_opt(budget_list=list_budgets, budget_index=budget_index,
                                                rewards_per_subcampaign=real_rewards)
        t1.append(time.time()-start_time_experiment)

        if comparison:
            start_time_experiment = time.time()
            ILP_knapsack(list_budgets=list_budgets, budget=budget_index,
                                                    rewards_per_subcampaign=real_rewards)
            t2.append(time.time()-start_time_experiment)
    t_filo.append(np.mean(t1))
    if ic:
        sigma_filo.append((np.var(t1))**0.5)
    if comparison:
        t_cap.append(np.mean(t2))
        if ic:
            sigma_cap.append((np.var(t2))**0.5)
    print('Tested with ', n_arms_adv, 'arms')


plt.plot(x,t_filo,'b',label='Dynamic Programming algorithm')

if ic:
    sigma_filo = np.asarray(sigma_filo, dtype=np.float32)

    plt.fill(np.concatenate([x, x[::-1]]),
             np.concatenate([t_filo - 1.96 * sigma_filo/(n_exp)**(0.5), (t_filo + 1.96 * sigma_filo/(n_exp)**0.5)[::-1]]),
             alpha=.5, fc='b', ec='None', label='95% Confidence Interval')

if comparison:

    plt.plot(x,t_cap,'r',label='Integer Linear Programming solver')

    if ic:
        sigma_cap = np.asarray(sigma_cap, dtype=np.float32)
        plt.fill(np.concatenate([x, x[::-1]]),
                 np.concatenate([t_cap - 1.96 * sigma_cap/(n_exp)**(0.5), (t_cap + 1.96 * sigma_cap/(n_exp)**0.5)[::-1]]),
                 alpha=.5, fc='r', ec='None', label='95% Confidence Interval')
plt.legend()
plt.show()
